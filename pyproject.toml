[project]
name = "sigmatcher"
version = "1.5.0"
authors = [{ name = "Ori Perry", email = "oriori1703@gmail.com" }]
license = { file = "LICENSE" }
readme = "README.md"
classifiers = [
    "Topic :: Security",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
description = "Write signatures to automatically match java classes and methods between versions"

requires-python = ">=3.10"
dependencies = [
    "typer>=0.12.3",
    "pydantic>=2.11,<3",
    "pyyaml>=6.0.1,<7",
    "platformdirs>=4.2.2,<5",
    "packaging>=24.1,<26",
    "typing-extensions;python_version<'3.12'",
]

[project.optional-dependencies]
typing = ["types-PyYAML>=6.0.1,<7"]
all = ["sigmatcher[typing]"]

[dependency-groups]
dev = ["ruff", "mypy"]

[project.urls]
Documentation = "https://github.com/oriori1703/sigmatcher#readme"
Issues = "https://github.com/oriori1703/sigmatcher/issues"
Source = "https://github.com/oriori1703/sigmatcher"

[project.scripts]
sigmatcher = "sigmatcher.cli:main"

[build-system]
requires = ["uv_build>=0.8.13,<0.9.0"]
build-backend = "uv_build"


#### Tools Configuration ####

[tool.mypy]
strict = true
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true


[tool.pyright]
typeCheckingMode = "strict"
reportImplicitOverride = true
reportUnusedCallResult = true

# Basedpyright Rules
reportUnannotatedClassAttribute = true
reportAny = true

[tool.ruff]
line-length = 120

[tool.ruff.lint]
extend-select = [
    "YTT",   # flake8-2020
    "ANN",   # flake8-annotations
    "ASYNC", # flake8-async
    "BLE",   # flake8-blind-except
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "LOG",   # flake8-logging
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "SLOT",  # flake8-slots
    "TID",   # flake8-tidy-imports
    "TC",    # flake8-type-checking
    "PTH",   # flake8-use-pathlib
    "FLY",   # flake8-flynt
    "I",     # isort
    "C90",   # maccabe
    "N",     # pep8-naming
    "E",     # pycodestyle
    "W",     # pycodestyle
    "F",     # pyflakes
    "PGH",   # pygrep-hooks
    "PL",    # pylint
    "UP",    # pyupgrade
    "FURB",  # refurb
    "RUF",   # ruff
]

extend-ignore = [
    "SIM108", # if-else-block-instead-of-if-exp
    "ISC003", # explicit-string-concatenation
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
